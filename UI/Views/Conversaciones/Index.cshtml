@model UI.Models.ConversacionesChatViewModel
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<!doctype html>
<html lang="en">

<head>

    <meta charset="utf-8" />
    <title>Conversaciones</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta content="Gestión de órdenes de Tico Sport Socks" name="description" />
    <meta content="Tico Sport Socks" name="author" />
    <!-- App favicon -->
    <link rel="shortcut icon" href="~/images/favicon.ico">

    <!-- dark layout js -->
    <script src="~/Scripts/js/pages/layout.js"></script>
    <link rel="stylesheet" href="~/Content/css/bootstrap.css" />
    <link rel="stylesheet" href="~/Content/css/app.css" />
    <link rel="stylesheet" href="~/Content/css/icons.css" />

</head>

<style>
    /* Contenedor principal con tres columnas */
    .contenedor-chat {
        display: flex;
        height: 80vh;
        margin-top: 20px;
        padding: 15px;
    }

    /* Panel Izquierdo: Lista de conversaciones */
    .lista-conversaciones {
        width: 35%;
        overflow-y: auto;
        border-right: 1px solid #ddd;
        background: #fff;
        border-radius: 8px;
    }

    /* Panel Central: Chat */
    .chat-panel {
        width: 50%;
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        padding: 20px;
        background: #f9f9f9;
        margin: 0 15px;
        border-radius: 8px;
    }

    /* Panel Derecho: Inventario y botón de crear orden */
    .inventory-panel {
        width: 35%;
        overflow-y: auto;
        background: #fff;
        border-left: 1px solid #ddd;
        border-radius: 8px;
    }

    /* Estilos existentes para el chat */
    .chat-placeholder {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        height: 100%;
        text-align: center;
        color: #777;
        font-size: 18px;
        font-weight: 500;
    }

        .chat-placeholder i {
            font-size: 50px;
            color: #bbb;
            margin-bottom: 10px;
        }

    .chat-box {
        flex-grow: 1;
        overflow-y: auto;
        border: 1px solid #ddd;
        background: #fff;
        padding: 15px;
        border-radius: 8px;
    }
</style>

<body>
    <div class="main-content">
        <div class="page-content">
            <!-- Begin page -->
            <div id="layout-wrapper">
                <div class="container mt-4">
                    <div class="text-center mb-4">
                        <h1>Gestión de órdenes</h1>
                        <p class="text-muted">Gestiona las órdenes que recibe Tico Sport Socks</p>
                        <button class="btn btn-primary" onclick="location.href='@Url.Action("VentaFisica", "Ordenes")'">
                            <i class="bi bi-plus-circle me-2"></i>
                            Registrar Venta Física
                        </button>
                        <button class="btn btn-primary" onclick="location.href='@Url.Action("OrdenesPendientes", "Ordenes")'">
                            <i class="bi bi-basket2-fill"></i>
                            Ver Ordenes Pendientes
                        </button>
                    </div>
                    <div class="contenedor-chat">
                        <!-- Panel Izquierdo: Lista de conversaciones -->
                        <div class="lista-conversaciones" id="conversaciones-panel">
                            <div class="card">
                                <div class="card-header bg-white d-flex justify-content-between">
                                    <h5 class="mb-0">Conversaciones</h5>
                                </div>
                                <div class="card-body">
                                    <ul class="list-group">
                                        @foreach (var conversacion in Model.Conversaciones)
                                        {
                                            <li class="list-group-item">
                                                <a href="@Url.Action("Index", "Conversaciones", new { id = conversacion.UsuarioId })"
                                                   class="abrir-chat"
                                                   data-id="@conversacion.UsuarioId">
                                                    <strong>@conversacion.Nombre</strong><br>
                                                    <small>@conversacion.Numero</small>
                                                </a>
                                            </li>
                                        }
                                    </ul>
                                </div>
                            </div>
                        </div>

                        <!-- Panel Central: Chat -->
                        <div class="chat-panel" id="chat-container" data-usuario-id="@Model.Chat?.UsuarioId">
                            @if (Model.Chat != null)
                            {
                                @Html.Partial("_Chat", Model.Chat)
                            }
                            else
                            {
                                <div class="chat-placeholder">
                                    <i class="fas fa-comments"></i>
                                    <p>Seleccione una conversación para ver los mensajes.</p>
                                </div>
                            }
                        </div>

                        <!-- Panel Derecho: Inventario y botón de crear orden -->
                        <div class="inventory-panel">
                            <div class="card">
                                <div class="card-header bg-white d-flex justify-content-between">
                                    <h5 class="mb-0">Inventario</h5>
                                </div>
                                <div class="card-body">
                                    <button type="button" class="btn btn-primary mb-3" onclick="location.href='@Url.Action("Create", "Ordenes")'">
                                        Crear Orden
                                    </button>
                                    <select class="form-select mb-3">
                                        <option>Selecciona la bodega</option>
                                        <option>Tibás</option>
                                        <option>Pérez Zeledón</option>
                                    </select>
                                    <div class="mb-3">
                                        <input type="text"
                                               class="form-control"
                                               placeholder="Nombre del producto, COD..."
                                               id="buscador-productos"
                                               aria-label="Buscar productos">
                                    </div>

                                    <!-- Contenedor para resultados de búsqueda -->
                                    <div id="productos-buscados" class="mb-4"></div>

                                    <h6 id="titulo-productos-populares">Productos más buscados</h6>
                                    <div class="list-group" id="productos-populares">
                                        @foreach (var producto in Model.Productos)
                                        {
                                            <div class="d-flex align-items-center justify-content-between border p-2 mb-2">
                                                <div class="d-flex align-items-center">
                                                    <img src="@producto.imagen" alt="@producto.nombre" style="width: 50px; height: auto;" class="me-3">
                                                    <div>
                                                        <p class="mb-1"><strong>@producto.nombre</strong></p>
                                                        <p class="mb-0">COD: @producto.CodigoDelProducto | Stock: @producto.stock</p>                                                    </div>
                                                </div>
                                                <a href="@Url.Action("DetalleProducto", "Ordenes", new { id = producto.Producto_ID })" class="btn btn-sm btn-info">Detalles</a>
                                            </div>
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    @section Scripts {
        <script>
            function actualizarMensajes() {
                const chatPanel = document.getElementById("chat-container");
                const usuarioId = chatPanel?.dataset.usuarioId;

                if (!usuarioId) return;

                fetch(`/Conversaciones/ObtenerMensajes/${usuarioId}`)
                    .then(response => {
                        if (!response.ok) {
                            throw new Error("Error al obtener mensajes");
                        }
                        return response.text();
                    })
                    .then(html => {
                        const mensajesContainer = document.getElementById("mensajes-container");
                        if (mensajesContainer) {
                            mensajesContainer.innerHTML = html;
                        }
                    })
                    .catch(err => console.error("Error al actualizar mensajes:", err));
            }


            function actualizarConversaciones() {
                fetch(window.location.href)
                    .then(response => response.text())
                    .then(html => {
                        const parser = new DOMParser();
                        const doc = parser.parseFromString(html, 'text/html');
                        const nuevoPanel = doc.getElementById("chat-container")?.innerHTML;
                        const actualPanel = document.getElementById("chat-container");

                        if (nuevoPanel && actualPanel) {
                            actualPanel.innerHTML = nuevoPanel;
                        }
                    })
                    .catch(err => console.error("Error al actualizar conversaciones:", err));
            }

            function actualizarInbox() {
                fetch(window.location.href)
                    .then(response => response.text())
                    .then(html => {
                        const parser = new DOMParser();
                        const doc = parser.parseFromString(html, 'text/html');
                        const nuevoInbox = doc.getElementById("conversaciones-panel")?.innerHTML;
                        const inboxActual = document.getElementById("conversaciones-panel");

                        if (nuevoInbox && inboxActual) {
                            inboxActual.innerHTML = nuevoInbox;
                        }
                    })
                    .catch(err => console.error("Error al actualizar la lista de conversaciones:", err));
            }


            setInterval(() => {
                actualizarMensajes();
                actualizarConversaciones();
                actualizarInbox();
            }, 6000);




            // Variable para controlar el debounce
            let timeoutBusqueda;

            // Función para manejar la búsqueda en tiempo real
            document.getElementById('buscador-productos').addEventListener('input', function (e) {
                clearTimeout(timeoutBusqueda);

                const terminoBusqueda = e.target.value.trim();
                const tituloProductosPopulares = document.getElementById('titulo-productos-populares');

                // Si el campo está vacío, mostrar productos populares y salir
                if (!terminoBusqueda) {
                    document.getElementById('productos-populares').style.display = 'block';
                    tituloProductosPopulares.style.display = 'block'; // Mostrar título
                    document.getElementById('productos-buscados').innerHTML = '';
                    return;
                }

                // Ocultar productos populares y su título durante la búsqueda
                document.getElementById('productos-populares').style.display = 'none';
                tituloProductosPopulares.style.display = 'none'; // Ocultar título

                // Mostrar mensaje de "Buscando..." mientras esperamos
                document.getElementById('productos-buscados').innerHTML = '<p class="text-muted">Buscando productos...</p>';

                // Esperar 300ms después de la última tecla para hacer la petición
                timeoutBusqueda = setTimeout(() => {
                    buscarProductos(terminoBusqueda);
                }, 300);
            });

            function buscarProductos(terminoBusqueda) {
                fetch(`/Conversaciones/BuscarProductos?termino=${encodeURIComponent(terminoBusqueda)}`)
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Error en la búsqueda');
                        }
                        return response.json();
                    })
                    .then(productos => {
                        const contenedorProductos = document.getElementById('productos-buscados');
                        contenedorProductos.innerHTML = '';

                        if (productos.length === 0) {
                            contenedorProductos.innerHTML = '<p class="text-muted">No se encontraron productos</p>';
                        } else {
                            productos.forEach(producto => {
                                const productoHTML = `
                        <div class="d-flex align-items-center justify-content-between border p-2 mb-2">
                            <div class="d-flex align-items-center">
                                <img src="${producto.imagen}" alt="${producto.nombre}" style="width: 50px; height: auto;" class="me-3">
                                <div>
                                    <p class="mb-1"><strong>${producto.nombre}</strong></p>
                                    <p class="mb-0">COD: ${producto.CodigoDelProducto} | Stock: ${producto.stock}</p>
                                </div>
                            </div>
                            <a href="/Ordenes/DetalleProducto/${producto.Producto_ID}" class="btn btn-sm btn-success">Detalles</a>
                        </div>
                    `;
                                contenedorProductos.innerHTML += productoHTML;
                            });
                        }
                    })
                    .catch(error => {
                        console.error('Error al buscar productos:', error);
                        document.getElementById('productos-buscados').innerHTML = '<p class="text-danger">Error al buscar productos</p>';
                    });
            }
        </script>
    }

